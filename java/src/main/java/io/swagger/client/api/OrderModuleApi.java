/*
 * Salesforce Commerce Cloud OMS
 * Salesforce Commerce Cloud OMS API test
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ErrorModel;
import org.threeten.bp.OffsetDateTime;
import io.swagger.client.model.OrderModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderModuleApi {
    private ApiClient apiClient;

    public OrderModuleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderModuleApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ommOrdersGet
     * @param offset The number of items to skip before returning the results (optional)
     * @param limit The number of items to return (optional)
     * @param odf From Order Date (optional)
     * @param odt To Order Date (optional)
     * @param oaf Minimum Order Amount (optional)
     * @param oat Maximum Order Amount (optional)
     * @param csp Customize Search Parameters (optional)
     * @param tp1 Test Parameter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ommOrdersGetCall(Integer offset, Integer limit, OffsetDateTime odf, OffsetDateTime odt, Double oaf, Double oat, String csp, String tp1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/omm/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (odf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("odf", odf));
        if (odt != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("odt", odt));
        if (oaf != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("oaf", oaf));
        if (oat != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("oat", oat));
        if (csp != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("csp", csp));
        if (tp1 != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("tp1", tp1));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ommOrdersGetValidateBeforeCall(Integer offset, Integer limit, OffsetDateTime odf, OffsetDateTime odt, Double oaf, Double oat, String csp, String tp1, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ommOrdersGetCall(offset, limit, odf, odt, oaf, oat, csp, tp1, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search order information
     * 
     * @param offset The number of items to skip before returning the results (optional)
     * @param limit The number of items to return (optional)
     * @param odf From Order Date (optional)
     * @param odt To Order Date (optional)
     * @param oaf Minimum Order Amount (optional)
     * @param oat Maximum Order Amount (optional)
     * @param csp Customize Search Parameters (optional)
     * @param tp1 Test Parameter (optional)
     * @return List&lt;OrderModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<OrderModel> ommOrdersGet(Integer offset, Integer limit, OffsetDateTime odf, OffsetDateTime odt, Double oaf, Double oat, String csp, String tp1) throws ApiException {
        ApiResponse<List<OrderModel>> resp = ommOrdersGetWithHttpInfo(offset, limit, odf, odt, oaf, oat, csp, tp1);
        return resp.getData();
    }

    /**
     * Search order information
     * 
     * @param offset The number of items to skip before returning the results (optional)
     * @param limit The number of items to return (optional)
     * @param odf From Order Date (optional)
     * @param odt To Order Date (optional)
     * @param oaf Minimum Order Amount (optional)
     * @param oat Maximum Order Amount (optional)
     * @param csp Customize Search Parameters (optional)
     * @param tp1 Test Parameter (optional)
     * @return ApiResponse&lt;List&lt;OrderModel&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<OrderModel>> ommOrdersGetWithHttpInfo(Integer offset, Integer limit, OffsetDateTime odf, OffsetDateTime odt, Double oaf, Double oat, String csp, String tp1) throws ApiException {
        com.squareup.okhttp.Call call = ommOrdersGetValidateBeforeCall(offset, limit, odf, odt, oaf, oat, csp, tp1, null, null);
        Type localVarReturnType = new TypeToken<List<OrderModel>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search order information (asynchronously)
     * 
     * @param offset The number of items to skip before returning the results (optional)
     * @param limit The number of items to return (optional)
     * @param odf From Order Date (optional)
     * @param odt To Order Date (optional)
     * @param oaf Minimum Order Amount (optional)
     * @param oat Maximum Order Amount (optional)
     * @param csp Customize Search Parameters (optional)
     * @param tp1 Test Parameter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ommOrdersGetAsync(Integer offset, Integer limit, OffsetDateTime odf, OffsetDateTime odt, Double oaf, Double oat, String csp, String tp1, final ApiCallback<List<OrderModel>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ommOrdersGetValidateBeforeCall(offset, limit, odf, odt, oaf, oat, csp, tp1, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<OrderModel>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ommOrdersOrderIdGet
     * @param orderId 注文ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ommOrdersOrderIdGetCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/omm/orders/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ommOrdersOrderIdGetValidateBeforeCall(String orderId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ommOrdersOrderIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = ommOrdersOrderIdGetCall(orderId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Detail order information
     * 
     * @param orderId 注文ID (required)
     * @return OrderModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderModel ommOrdersOrderIdGet(String orderId) throws ApiException {
        ApiResponse<OrderModel> resp = ommOrdersOrderIdGetWithHttpInfo(orderId);
        return resp.getData();
    }

    /**
     * Detail order information
     * 
     * @param orderId 注文ID (required)
     * @return ApiResponse&lt;OrderModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderModel> ommOrdersOrderIdGetWithHttpInfo(String orderId) throws ApiException {
        com.squareup.okhttp.Call call = ommOrdersOrderIdGetValidateBeforeCall(orderId, null, null);
        Type localVarReturnType = new TypeToken<OrderModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Detail order information (asynchronously)
     * 
     * @param orderId 注文ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ommOrdersOrderIdGetAsync(String orderId, final ApiCallback<OrderModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ommOrdersOrderIdGetValidateBeforeCall(orderId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ommOrdersOrderIdPut
     * @param orderId 注文ID (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ommOrdersOrderIdPutCall(String orderId, OrderModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/omm/orders/{orderId}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ommOrdersOrderIdPutValidateBeforeCall(String orderId, OrderModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ommOrdersOrderIdPut(Async)");
        }
        
        com.squareup.okhttp.Call call = ommOrdersOrderIdPutCall(orderId, body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update order infromation
     * 
     * @param orderId 注文ID (required)
     * @param body  (optional)
     * @return OrderModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderModel ommOrdersOrderIdPut(String orderId, OrderModel body) throws ApiException {
        ApiResponse<OrderModel> resp = ommOrdersOrderIdPutWithHttpInfo(orderId, body);
        return resp.getData();
    }

    /**
     * Update order infromation
     * 
     * @param orderId 注文ID (required)
     * @param body  (optional)
     * @return ApiResponse&lt;OrderModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderModel> ommOrdersOrderIdPutWithHttpInfo(String orderId, OrderModel body) throws ApiException {
        com.squareup.okhttp.Call call = ommOrdersOrderIdPutValidateBeforeCall(orderId, body, null, null);
        Type localVarReturnType = new TypeToken<OrderModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update order infromation (asynchronously)
     * 
     * @param orderId 注文ID (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ommOrdersOrderIdPutAsync(String orderId, OrderModel body, final ApiCallback<OrderModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ommOrdersOrderIdPutValidateBeforeCall(orderId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ommOrdersOrderIdStatusOrderStatusPatch
     * @param orderId 注文ID (required)
     * @param orderStatus 注文状態 (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ommOrdersOrderIdStatusOrderStatusPatchCall(String orderId, String orderStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/omm/orders/{orderId}/status/{orderStatus}"
            .replaceAll("\\{" + "orderId" + "\\}", apiClient.escapeString(orderId.toString()))
            .replaceAll("\\{" + "orderStatus" + "\\}", apiClient.escapeString(orderStatus.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ommOrdersOrderIdStatusOrderStatusPatchValidateBeforeCall(String orderId, String orderStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'orderId' is set
        if (orderId == null) {
            throw new ApiException("Missing the required parameter 'orderId' when calling ommOrdersOrderIdStatusOrderStatusPatch(Async)");
        }
        // verify the required parameter 'orderStatus' is set
        if (orderStatus == null) {
            throw new ApiException("Missing the required parameter 'orderStatus' when calling ommOrdersOrderIdStatusOrderStatusPatch(Async)");
        }
        
        com.squareup.okhttp.Call call = ommOrdersOrderIdStatusOrderStatusPatchCall(orderId, orderStatus, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update order status
     * 
     * @param orderId 注文ID (required)
     * @param orderStatus 注文状態 (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void ommOrdersOrderIdStatusOrderStatusPatch(String orderId, String orderStatus) throws ApiException {
        ommOrdersOrderIdStatusOrderStatusPatchWithHttpInfo(orderId, orderStatus);
    }

    /**
     * Update order status
     * 
     * @param orderId 注文ID (required)
     * @param orderStatus 注文状態 (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> ommOrdersOrderIdStatusOrderStatusPatchWithHttpInfo(String orderId, String orderStatus) throws ApiException {
        com.squareup.okhttp.Call call = ommOrdersOrderIdStatusOrderStatusPatchValidateBeforeCall(orderId, orderStatus, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update order status (asynchronously)
     * 
     * @param orderId 注文ID (required)
     * @param orderStatus 注文状態 (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ommOrdersOrderIdStatusOrderStatusPatchAsync(String orderId, String orderStatus, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ommOrdersOrderIdStatusOrderStatusPatchValidateBeforeCall(orderId, orderStatus, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for ommOrdersPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ommOrdersPostCall(OrderModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/omm/orders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ommOrdersPostValidateBeforeCall(OrderModel body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = ommOrdersPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create order information
     * 
     * @param body  (optional)
     * @return OrderModel
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public OrderModel ommOrdersPost(OrderModel body) throws ApiException {
        ApiResponse<OrderModel> resp = ommOrdersPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create order information
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;OrderModel&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<OrderModel> ommOrdersPostWithHttpInfo(OrderModel body) throws ApiException {
        com.squareup.okhttp.Call call = ommOrdersPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<OrderModel>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create order information (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ommOrdersPostAsync(OrderModel body, final ApiCallback<OrderModel> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ommOrdersPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<OrderModel>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
